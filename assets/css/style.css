/* Universal selector */
* {
    box-sizing: border-box;
    padding: 0;
    margin: 0;
}

/* Element selectors */

body {
 
}

body nav {
  display: flex;
  text-decoration: none;
}

article {
    margin-top: 100px;
}

p {
    font-size: 32px;
}

/* Experimental Cube */

.cube {
    width: 20px;
    height: 20px;
    transform-style: preserve-3d;
    margin: 50px;
  }
  .face {
    width: 100px;
    height: 100px;
    background: #05520c;
    border: 2px solid rgb(0, 0, 0);
    position: absolute;
    opacity: 0.75;
    transform: translateZ(50px);
  }
  .front {
    transform: translateZ(50px);
  }
  .back {
    transform: translateZ(-50px) rotateY(180deg);
  }
  .left {
    transform: translateX(-50px) rotateY(-90deg);
  }
  .right {
    transform: translateX(50px) rotateY(90deg);
  }
  .top {
    transform: translateY(-50px) rotateX(90deg);
  }
  .bottom {
    transform: translateY(50px) rotateX(-90deg);
  }

  .cube {
    width: 20px;
    height: 20px;
    transform-style: preserve-3d;
    animation: turn 10s linear infinite;
    margin: 50px;
    margin-left: 750px;
  }
  .face {
    width: 100px;
    height: 100px;
    background: #031f03;
    border: 2px solid rgb(2, 2, 2);
    position: absolute;
    opacity: 0.95;
    transform: translateZ(50px);
  }
  .front {
    transform: translateZ(50px);
  }
  .back {
    transform: translateZ(-50px) rotateY(180deg);
  }
  .left {
    transform: translateX(-50px) rotateY(-90deg);
  }
  .right {
    transform: translateX(50px) rotateY(90deg);
  }
  .top {
    transform: translateY(-50px) rotateX(90deg);
  }
  .bottom {
    transform: translateY(50px) rotateX(-90deg);
  }




/* Class selectors */
.header {
    padding: 20px;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #0a410f;
    color: #bbb6b6;
    text-align: center;
}

.header h1 {
    display: inline-block;
    font-size: 48px;
}   


.header nav {
    padding-top: 15px;
    margin-right: 20px;
    float: right;
    font-family: Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif;
    font-size: 20px;
}

.header nav ul {
    list-style-type: none;
}

.header nav ul li {
    display: inline-block;
    margin-left: 25px;
}

.pics{
    display: flex;
    flex-wrap: wrap;
    flex-direction: row;
    margin-left: -1.5rem;
    margin-right: -1.5rem;
    margin-top: 100px;

}

.justify-center {
    justify-content: center;
  }


.footer {
    padding: 30px;
    clear: both;
    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
    text-align: center;
}

.footer h2 {
    font-size: 20px;
    
}


.pg-1 {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}


.pg-2 {
  min-height: 100vh;
  display: flex;
  flex-direction: row;
}

.pg-3 {
  min-height: 100vh;
  display: flex;
  flex-direction: column
}

/* 
What is the flex property a shorthand property for?
It is a shorthand property for the flex-grow, flex-shrink, and flex-basis properties 
What is it doing here?
We are making the product card not growable, not shrinkable, and with an initial length of 400px 
*/
.card {
  border-style: none;
  border-width: 1px;
  border-radius: 10px;
  padding: 5px;
  flex: 0 0 400px;
}

.bigger-card {
  border-style: solid;
  border-width: 1px;
  border-radius: 10px;
  padding: 10px;
  flex: 0 0 400px;
}